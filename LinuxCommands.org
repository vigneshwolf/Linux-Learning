Linux Commands;

    $ date - Show's the date and time for the day.
    Ctrl+d - Is used for exiting.
    echo - simply displays an argument


    ls - Lists the name of files

    cat > - Is the simplest way used to create a file

    cat filename - displays the text inside the file name

    rm (remove) - Is used to delet the file.

    cp (copy) - copying a file.

    mv (move) - Is used to move or rename a file.

    whoami _ shows your name on the Linux

    hostname - shows your host name

    uname - Shows the linux user name

    psw (print working directory) - To see the current directory

    cd (current directory) - cd is used to change the directory and path

    mkdir - used to create a new empty directory

    rmdir - Used to delete the empty directory

    .. - this is used to go back to the old and new directories it is.

    ls -a - it is use to find all the files hidden and non hidden files

    ~ - is a tilde is an abrivation for your home directory

    locate mkdir - to find the files whose name contains mkdir

    ls -l - Is used to find the size of the file

    rm name.txt and etc - is used in many ways to delet several files

    mkdir - is also used in many ways to make several directorie in one go

    cat - can be used to join multiple files to geather

    man - is used to read the manual for the program

    man mkdir - is used to read the man page.

    q - is used to quit it from the man page.

    cal - is used for calander

    pwd - (print working directory)

    mkdir - it is used to create a directory

    mkdir /scr/edu - This creates a subdirectory

    -v mkdir - prints a message to each directories

    mkdir -v -p - This command is used to or compromises to open a same directories

    ls - Using to list the contents of the current working directories

    cd - used to navigate the directories

    less - it is used to for viewing text files.

    less Desktop/.txt - this command to read or displey the text files

    less -N - Displayes the line Section numbers

    'N - Is used to navigate to the next files

    'p - Is used to navigate the previous files

    ls - shows the desktop and pc files and folders lists

    Insted of using cd to navigate the directories we want use (directory name) (ls Desktop/)

    ls.. refers to the parent of the current working directory.

    ls../Desktop - (..) refers to the parent directory and (/Desktop) refers to the desktop directories

    ls -l - (-l) refers to long listing format.

    ls -a - this command displayes hidden files too

    ls -lh - this command shows us the files that are in the current directories in MB or KB

    rm - This command can be used to delet the file or directories too. !This comman is dangerous!

    rm -filename - This command is used to delete the mentioned file name .

    rm (filename) -i - This command the (-i) will give an alert before deleting a file like (remove regular file (filename)?)

    rm (filenam) -v - This command (-v) will give you a alert that the file is deleted

    rm (directoryname) -r - This command (-r) will delet the directory.

    rm -r -I -v - This removes the directory and gives an alert of what done with this command.

    cd - Basic command lines using cd command
    
    cd (directory name)/ will change the directory

    cd .. - returnes to the old directories

    cd../.. - will refer to the parent directory (../..) is the parent of the directory which is the (home)

    cd - can be used to navigate the subdirectories too

    .. - Refers to patern to the current working directory

    / - refers to the root of the directory (or) viewing a file.

    mv - move files

    mv - this command is used to move files

    mv Desktop/name.txt kamal - this command moves the name.txt file from the Desktop directory to kamal directory

    mv -v - will explain the process whats being done

    mv - can also be used to move multiple files to a comman destination directory to move multiple files

    mv WXYZ (kamal directory) - all four files moved to one directory

    cd ~ - using (cd) to navigate using ~

    The path of the home directory can also by printing the value stored in the home enviroment variable (echo $home)

    ls /home - This command is used for checking other users in home directories

    ls ~vignesh - This command refers to the home directory

    cd ~ - This command refers to the users own directory

    cd ~/Desktop - Refers to the Desktop directory

    ln - Is used to create a symbolic link

    ln - makes linksbetween files

    ln -s Desktop/kamal W - This brings the files on the desktop in a folder of kamal thers a W directory. it brings out to the main directory

    file W - for checking that we can use file w and it shows

    ls -l - to verify

    -l - the (-l) long file format shows W is a link and it points to the corosponding directory

    ln -s Desktop/kamal - when we invoke (ln) in this manar. providing only a single file as an argument (ln) creates a symbolic link to the file with the same lane in the
    current working directory.

    file - to determine a file type.

    file /usr/share/man/manl/sportify - this tells us that sportify is a data.

    file Desktop/kamal - we can see that this is a directory

    cp -  copying a single file

    cp -r Desktop/kamal X - (-r) is recrusive- the result is a file in the current directory which is X.

    cp X kamal - this kamal directory contains the copy of X

    echo - to display a simple line of text messgae

    echo "Hello,World" - echo prints the message to a standard output

    echo - this displayes miltiple line messages.

    echo " Hello, World - the content of our message will continue until we enter a closing quotation mark.

    echo - can be used to diaplay message with a escape sequence.

    echo - Is a bash built in command.

    echo "i am ?\tvignesh" - This command /t didnt create a space between i am? and vignesh.

    echo -e - Is enabled interpretation of the following backlash escape.

    echo -e "i am\tvignesh" - now this will display the result with a space in between.

    \t\t - if we use this command it will create a double space in between a results.

    echo -e - "hai this is\nvignesh" - this will display the result a line below the sentance above.

    grep - Is a command line text file in lines. it prints out all the lines in matching pattern

    grep ZIP - Shows the pattern with the name zip in files

    ls /bin/usr/bin | grep -i ZIP - (-i) specifies that grep should ignore case distinsion
 
    head and tail - Is the command that prints first and last lines of the file

    head - By default ead prints the first 10 lines of the txt file

    tail - prints the last 10 lines of the txt file

    head file.txt - This displayes the first 10 lines of the txt file

    tail file.txt - This displayes the last 10 lines of the txt file

    head -n5 file.txt - This displayes the first 5 lines in the txt file (-n) prints the first number lines insted of the first 10 lines

    echo - The command (echo) accepts o (or) more strings provided by the usr and prints those strings to standard output

    echo hello - echo prints the string hello

    echo hello world - If theres are two stings echo prints hello world.

    echo hello      world - if we give a large space between the string echo prints with a single space hello world

    echo "hello world" - If we put quotation marks echo prints the string as it is hello world

    * - wildcard expansion command 

    echo * - this displayes the list of file and apps that are in the directory

    ls /usr/bin/*.h - This result is listing of all the files name in the specified directory whose file name and in *h

    command line basics- Arithmetic expansion

    Arithmetic expansion - Allows the shell to perform calculations before passing the results to a command as arguments.

    Arithmetic expansion ($) (( )) double brackets around arithmetic exopansion

    echo $((7+3)) = 10 - This expression has been calculated with the result 10.

    Note : the arithmetic expansion only supports intigers for whole numbers

    echo $((7.0 + 3)) - this expression will result in error 

    Arithmetic expansion supports.

   (+) , (-) , (*) , (\) , (%) , (**) .

   echo $((7/2)) $((7%2)) - the result 3 and 1 the one is calculated using precentage symbol, the 3 is calculated using dividing symbol.

   echo $((5**2))-25- this prints the result as 25

   Inside the double print z7 arithematic expression it is possible to nest another arithematic expression

   echo ((5**$((1+1)))) - here we have nested an arithematic expression 1+1 and a large expression 5 to the power of 1+1

   Brace expansion command line basic 

   Brace expansion creates multiple text in a pattern.
  
   echo abc{Brahms,Bethovan,Bach)xyz - this pattern has expands into three txt strings. result abcbrahmsxyz.

   echo I love {brahms,beethovan,bach} - here bash considers I love and {brahms,beethovan,bach} to be separated token space between the words.

   echo to how to specify a range in Brace expansion

   echo Number_{1..5} - Number_1 Number_2 Number_3 this expanded to 5 strings

   echo {a..z} - we can also use a sequence of character  with the operator here the pattern has expanded to a sequence of lower cases

   echo {01..09} - Integers within a Brace expansion can be 0 padded. the result will be 01 02 03 04 05 06 07 08 09

   echo Number_{5..1} - Brace expansion can also specify numbers in reverse order.

   Brace expansion can also be nested 

   echo a{A{1,2},B{3,4}}b - in this case (a,b) are constant in the variable part of the expansion the brace expansion is list of items separated by (commas)

   Bash starts with the first item {A(1,2) this is a Brace expansion as well this expands to two strings (A1,A2) B{3,4) This strings procedure are the expransion 

   Brace expansion are perticularly useful for making list of files or directories with the name other fixed format.

   mkdir photos - creating a folder 

   cd photos - to the photos directory

   mkdir {2008..2017}-{01..12) - this command creates the folder for mentioned ten years with the months.

   escaping characters - by default the ($) sing has a special significant to the shell.

   echo ${USER} - use of the $ sing here tells bash that we want to refer to the variable of the user

   if we ant to print a string containing a actual $ sing we can preseve the dollar sing with a {\} 

   echo \$USER - if the ($) sing followeb with txt then the quoting of the $ sing prevents expansion by treating the $ sing a actual 

   echo the balance for the user ${USER} is \$5.00 - in this command there are two expansions that could take place thers a variable ${USER} that is expanded to the variable
   vignesh secondly the escaping the \$ sing in to the literal $ sing character and prevents $5 being a variable expansion.

   there are other character that has special significant to bash 

   these includes - ($) , (!) , (&) , (\) , and the space charecter

   command line basics double quoted stings
  
   mkdir example - opeaning a directory

   cd example - opeaning the directory

   touch my\first\file.txt - this command creates the file name my first file.txt

   ls -l is used to verify weather the file is created or not.

   \ - the sing (\) is used to create space in between the file name

   rm "my first file.txt" - by using the quotation sing the bash treats the entire string as a single token.

   rm - is used to delete the files.

   single quoted string command line basic

   echo 'my   string with      spaces' - just a in doube quotes are used to enclose a sting. whrn a string is being enclosed with single quotes 
   that sring has been treated by bash as a single token 

   when using double quoted string word spliting and parameter expansion telda expansion and brace expansion are surpressed.
   but parameter expansion arithematic expansion and command subtitution are still performed.
   
   echo Hello,    world ~/example/*.txt {3..7} $(file /etc/corntab) $((2+2)) ${USER} - bash begins by tokenising the argument line resulting in 7 tokens to pass this arguments to echo
   the first argument is the plain text string Hello, the second argument is the plain txt string the world the third argument is the string ~/example/*.txt this argument
   is expanded using ~ expansion and wildcard expansion in to the a.txt and b.txt thr file that i created the fouth argument is {3..7} this is expanded using brace expansion into 
   the numbers in between the fifth argument is (file /etc/contab)within $ sing this expands the command subtitution the result of performing the (file /etc/contab) 
   the sixth argument is the arithematic expansion the two operation $((2+2)) which is expanded using arithematic expansion in to the result 4 tthe seventh argument 
   is the variable ${USER} which is expanded using parameter expansion in to the directory 

    


   
  

    
       

    
    

   
    

 
